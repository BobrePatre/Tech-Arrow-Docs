name: Generate and Deploy Client Libraries

on:
  push:
    branches:
      - main

jobs:
  generate-and-deploy-http-libs:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v2

      - name: Install jq
        run: sudo apt-get install jq

      - name: Set up JDK 11
        uses: actions/setup-java@v2
        with:
          java-version: '11'
          distribution: 'adopt'

      - name: Find API Specifications
        id: find_specs
        run: |
          echo "::set-output name=spec_paths::$(find openapi -type f \( -iname "*.yaml" -o -iname "*.json" \) | xargs)"
        shell: bash

      - name: Generate Clients
        run: |
          mkdir -p generated-clients
          spec_paths=${{ steps.find_specs.outputs.spec_paths }}
          repo_prefix=$(echo "$GITHUB_REPOSITORY" | sed 's/BobrePatre\///' | sed 's/-Docs\|-Declaration\|-Documentation//')
          for spec in $spec_paths; do
            filename=$(basename "${spec%.*}")
            filename=${filename%.swagger}
            for generator in go python dart-dio typescript-axios; do
              library_name="${repo_prefix}-${filename}-${generator}-http-library"
              output_dir="generated-clients/$library_name"
              mkdir -p "$output_dir"
              echo "Generating $generator client for $spec"
              wget https://repo1.maven.org/maven2/org/openapitools/openapi-generator-cli/5.3.0/openapi-generator-cli-5.3.0.jar -O openapi-generator-cli.jar
              java -jar openapi-generator-cli.jar generate -i "$spec" -g "$generator" -o "$output_dir"
            done
          done
        shell: bash

      - name: Customize package.json for TypeScript Axios
        run: |
          spec_paths=${{ steps.find_specs.outputs.spec_paths }}
          repo_prefix=$(echo "$GITHUB_REPOSITORY" | sed 's/BobrePatre\///' | sed 's/-Docs\|-Declaration\|-Documentation//')
          for spec in $spec_paths; do
            filename=$(basename "${spec%.*}")
            filename=${filename%.swagger}
            ts_library_dir="generated-clients/${repo_prefix}-${filename}-typescript-axios-http-library"
            if [ -d "$ts_library_dir" ]; then
              cd "$ts_library_dir"
              if [ -f "package.json" ]; then
                jq --arg url "https://github.com/BobrePatre/${repo_prefix}-${filename}-typescript-axios-http-library.git" '.repository = {"type": "git", "url": $url}' package.json > temp.json && mv temp.json package.json
              else
                cat > package.json <<EOF
                {
                  "name": "${repo_prefix}-${filename}-typescript-axios-http-library",
                  "version": "1.0.0",
                  "description": "TypeScript Axios client generated from OpenAPI spec",
                  "main": "index.js",
                  "scripts": {
                    "build": "tsc"
                  },
                  "author": "",
                  "license": "ISC",
                  "dependencies": {
                    "axios": "^0.21.1"
                  },
                  "repository": {
                    "type": "git",
                    "url": "https://github.com/BobrePatre/${repo_prefix}-${filename}-typescript-axios-http-library.git"
                  }
                }
          EOF
              fi
              cd -
            fi
          done
        shell: bash

      - name: Create and Push Repositories
        env:
          GH_PAT: ${{ secrets.GH_PAT }}
        run: |
          spec_paths=${{ steps.find_specs.outputs.spec_paths }}
          commit_message=$(git log -1 --pretty=%B)
          repo_prefix=$(echo "$GITHUB_REPOSITORY" | sed 's/BobrePatre\///' | sed 's/-Docs\|-Declaration\|-Documentation//')
          for spec in $spec_paths; do
            filename=$(basename "${spec%.*}")
            filename=${filename%.swagger} # Remove .swagger from the filename
            for generator in go python dart-dio typescript-axios; do
              library_name="${repo_prefix}-${filename}-${generator}-http-library"
              output_dir="generated-clients/$library_name"
          
              echo "Checking if $library_name repository exists..."
              if curl --silent --output /dev/null --head --fail "https://github.com/BobrePatre/$library_name"; then
                echo "Repository $library_name already exists, updating..."
                # Создаем временную директорию для клонирования и обновления репозитория
                tmp_clone_dir=$(mktemp -d)
                git clone https://BobrePatre:$GH_PAT@github.com/BobrePatre/$library_name.git "$tmp_clone_dir"
          
                # Синхронизируем сгенерированные файлы во временную директорию
                rsync -av --exclude='.git' "$output_dir/" "$tmp_clone_dir/"
          
                cd "$tmp_clone_dir" || exit 1
                git config user.name "GitHub Actions"
                git config user.email "actions@github.com"
                git add .
                if ! git diff --cached --exit-code; then
                  git commit -m "$commit_message"
                  git pull --rebase origin main
                  git push origin main
                else
                  echo "No changes to commit for $library_name."
                fi
                cd -
                # Удаляем временную директорию
                rm -rf "$tmp_clone_dir"
              else
                echo "Creating repository $library_name..."
                curl -u "BobrePatre:$GH_PAT" https://api.github.com/user/repos -d "{\"name\":\"$library_name\"}"
          
                # Инициализация и первый коммит в новом репозитории
                mkdir -p "$output_dir"
                cd "$output_dir" || exit 1
                git init
                git config user.name "GitHub Actions"
                git config user.email "actions@github.com"
                git add .
                git commit -m "$commit_message"
                git branch -M main
                git remote add origin https://BobrePatre:$GH_PAT@github.com/BobrePatre/$library_name.git
                git push -u origin main
                cd -
              fi
            done
          done
  
  
  
  

  generate-and-deploy-grpc-libs:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v2

      - name: Checkout submodules
        run: |
          git submodule update --init --recursive


      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.x'

      - name: Set up Dart
        uses: dart-lang/setup-dart@v1
        with:
          sdk: "stable"

      - name: Set up Go
        uses: actions/setup-go@v2
        with:
          go-version: '^1.16'

      - name: Install Protobuf Compiler and Plugins
        run: |
          sudo apt-get update
          sudo apt-get install -y protobuf-compiler
          go install google.golang.org/protobuf/cmd/protoc-gen-go@v1.26
          go install google.golang.org/grpc/cmd/protoc-gen-go-grpc@v1.1
          go install github.com/grpc-ecosystem/grpc-gateway/v2/protoc-gen-grpc-gateway@v2.5.0
          python -m pip install grpcio-tools
          python -m pip install grpcio
          dart pub global activate protoc_plugin
          echo "$HOME/.pub-cache/bin" >> $GITHUB_PATH

      - name: Find Proto Specifications
        id: find_protos
        run: |
          echo "::set-output name=proto_paths::$(find proto -type f -iname "*.proto" | xargs)"
        shell: bash

      - name: Generate gRPC Clients and Servers
        run: |
          mkdir -p generated-grpc-clients/dart
          mkdir -p generated-grpc-clients/go
          mkdir -p generated-grpc-clients/python
          proto_paths=${{ steps.find_protos.outputs.proto_paths }}
          repo_prefix=$(echo "$GITHUB_REPOSITORY" | awk '{print tolower($0)}' | sed 's/bobrepatre\///' | sed 's/-docs\|-declaration\|-documentation//')
          for proto in $proto_paths; do
            directory=$(dirname "${proto}")
            filename=$(basename "${proto%.*}")
            output_base="generated-grpc-clients"
            output_dart="${output_base}/dart/${repo_prefix}-${filename}-grpc-library"
            output_go="${output_base}/go/${repo_prefix}-${filename}-grpc-library"
            output_python="${output_base}/python/${repo_prefix}-${filename}-grpc-library"
            protoc -I proto \
                   -I vendor \
                   -I vendor/googleapis \
                   -I vendor/grpc-gateway \
                   --dart_out=grpc:"$output_dart" \
                   --go_out="$output_go" --go_opt=paths=source_relative \
                   --go-grpc_out="$output_go" --go-grpc_opt=paths=source_relative \
                   --python_out="$output_python" \
                   --python-grpc_out="$output_python" \
                   "${proto}"
          done
        shell: bash


      - name: Create and Push Repositories
        env:
          GH_PAT: ${{ secrets.GH_PAT }}
        run: |
          spec_paths=${{ steps.find_specs.outputs.spec_paths }}
          commit_message=$(git log -1 --pretty=%B)
          repo_prefix=$(echo "$GITHUB_REPOSITORY" | sed 's/BobrePatre\///' | sed 's/-Docs\|-Declaration\|-Documentation//')
          for spec in $spec_paths; do
            filename=$(basename "${spec%.*}")
            filename=${filename%.swagger} # Remove .swagger from the filename
            for generator in go python dart-dio typescript-axios; do
              library_name="${repo_prefix}-${filename}-${generator}-http-library"
              output_dir="generated-grpc-clients/$library_name"

              echo "Checking if $library_name repository exists..."
              if curl --silent --output /dev/null --head --fail "https://github.com/BobrePatre/$library_name"; then
                echo "Repository $library_name already exists, updating..."
                # Создаем временную директорию для клонирования и обновления репозитория
                tmp_clone_dir=$(mktemp -d)
                git clone https://BobrePatre:$GH_PAT@github.com/BobrePatre/$library_name.git "$tmp_clone_dir"

                # Синхронизируем сгенерированные файлы во временную директорию
                rsync -av --exclude='.git' "$output_dir/" "$tmp_clone_dir/"

                cd "$tmp_clone_dir" || exit 1
                git config user.name "GitHub Actions"
                git config user.email "actions@github.com"
                git add .
                if ! git diff --cached --exit-code; then
                  git commit -m "$commit_message"
                  git pull --rebase origin main
                  git push origin main
                else
                  echo "No changes to commit for $library_name."
                fi
                cd -
                # Удаляем временную директорию
                rm -rf "$tmp_clone_dir"
              else
                echo "Creating repository $library_name..."
                curl -u "BobrePatre:$GH_PAT" https://api.github.com/user/repos -d "{\"name\":\"$library_name\"}"

                # Инициализация и первый коммит в новом репозитории
                mkdir -p "$output_dir"
                cd "$output_dir" || exit 1
                git init
                git config user.name "GitHub Actions"
                git config user.email "actions@github.com"
                git add .
                git commit -m "$commit_message"
                git branch -M main
                git remote add origin https://BobrePatre:$GH_PAT@github.com/BobrePatre/$library_name.git
                git push -u origin main
                cd -
              fi
            done
          done

