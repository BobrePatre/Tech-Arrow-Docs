name: Generate and Deploy Client Libraries

on:
  push:
    branches:
      - main

jobs:
  generate-and-deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v2

      - name: Set up JDK 11
        uses: actions/setup-java@v2
        with:
          java-version: '11'
          distribution: 'adopt'

      - name: Find API Specifications
        id: find_specs
        run: |
          echo "::set-output name=spec_paths::$(find openapi -type f \( -iname "*.yaml" -o -iname "*.json" \) | xargs)"
        shell: bash

      - name: Generate Clients
        run: |
          mkdir -p generated-clients
          spec_paths=${{ steps.find_specs.outputs.spec_paths }}
          for spec in $spec_paths; do
            filename=$(basename "${spec%.*}")
            filename=${filename%.swagger} # Удаляем .swagger из названия файла
            for generator in go python dart-dio typescript-axios; do
              library_name="${filename}-${generator}-library"
              output_dir="generated-clients/$library_name"
              mkdir -p "$output_dir"
              echo "Generating $generator client for $spec"
              wget https://repo1.maven.org/maven2/org/openapitools/openapi-generator-cli/5.3.0/openapi-generator-cli-5.3.0.jar -O openapi-generator-cli.jar
              java -jar openapi-generator-cli.jar generate -i "$spec" -g "$generator" -o "$output_dir"
            done
          done

      - name: Create and Push Repositories
        env:
          GH_PAT: ${{ secrets.GH_PAT }}
        run: |
          spec_paths=${{ steps.find_specs.outputs.spec_paths }}
          commit_message=$(git log -1 --pretty=%B)
          for spec in $spec_paths; do
            filename=$(basename "${spec%.*}")
            filename=${filename%.swagger} # Удаляем .swagger из названия файла
            for generator in go python dart-dio typescript-axios; do
              library_name="${filename}-${generator}-library"
              output_dir="generated-clients/$library_name"
          
              echo "Checking if $library_name repository exists..."
              if curl --silent --output /dev/null --head --fail "https://github.com/BobrePatre/$library_name"; then
                echo "Repository $library_name already exists."
              else
                echo "Creating repository $library_name..."
                curl -u "BobrePatre:$GH_PAT" https://api.github.com/user/repos -d "{\"name\":\"$library_name\"}"
              fi

              cd "$output_dir" || exit 1
              git init
              git config user.name "GitHub Actions"
              git config user.email "actions@github.com"
              git add .
              git commit -m "$commit_message"
              git branch -M main
              git remote add origin https://BobrePatre:$GH_PAT@github.com/BobrePatre/$library_name.git
              git push -u origin main -f
              cd -
            done
          done
