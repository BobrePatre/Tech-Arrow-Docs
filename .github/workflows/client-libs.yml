name: Generate and Deploy Client Libraries

on:
  push:
    branches:
      - main

jobs:
  setup-environment:
    runs-on: ubuntu-latest
    outputs:
      repo_prefix: ${{ steps.repo_prefix.outputs.prefix }}
    steps:
      - uses: actions/checkout@main

      - name: Determine Repo Prefix
        id: repo_prefix
        run: echo "prefix=$(echo "$GITHUB_REPOSITORY" | sed 's/.*\///' | sed 's/-Docs\|-Declaration\|-Documentation//')" >> $GITHUB_OUTPUT


  generate-and-deploy-http-libs:
    needs: setup-environment
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@main

      - name: "Check Targets"
        run: |
          if [ ! -d "openapi" ]; then
            echo "openapi dir is not exists, skipping job"
          fi
          
          spec_paths=$(find openapi -name "*.swagger.json")
          if [ -z "$spec_paths" ]; then 
            echo "Nothing to generate"
            exit 0
          fi

      - name: Install jq
        run: sudo apt-get update && sudo apt-get install jq -y

      - name: Set up JDK 11
        uses: actions/setup-java@main
        with:
          java-version: '11'
          distribution: 'adopt'




      - name: Generate Clients
        run: |
          spec_paths=$(find openapi -name "*.swagger.json")
          if [ -z "$spec_paths" ]; then 
            echo "Nothing to generate"
            exit 0
          fi
          mkdir -p generated-clients
          repo_prefix=${{ needs.setup-environment.outputs.repo_prefix }}
          wget https://repo1.maven.org/maven2/org/openapitools/openapi-generator-cli/5.3.0/openapi-generator-cli-5.3.0.jar -O openapi-generator-cli.jar
          for spec in $spec_paths; do
            filename=$(basename "${spec%.*}" | sed 's/\.swagger$//')
            for generator in go python dart-dio typescript-axios; do
              library_name="${repo_prefix}-${filename}-${generator}-http-library"
              output_dir="generated-clients/$library_name"
              mkdir -p "$output_dir"
              echo "Generating $generator client for $spec"
              java -jar openapi-generator-cli.jar generate -i "$spec" -g "$generator" -o "$output_dir"
            done
          done

      - name: Customize package.json for TypeScript Axios
        run: |
          spec_paths=$(find openapi -name "*.swagger.json")
          repo_prefix=${{ needs.setup-environment.outputs.repo_prefix }}
          for spec in $spec_paths; do
            filename=$(basename "${spec%.*}" | sed 's/\.swagger$//')
            ts_library_dir="generated-clients/${repo_prefix}-${filename}-typescript-axios-http-library"
            if [ -d "$ts_library_dir" ]; then
              cd "$ts_library_dir"
              if [ -f "package.json" ]; then
                jq --arg url "https://github.com/${{ github.repository_owner }}/${repo_prefix}-${filename}-typescript-axios-http-library.git" '.repository = {"type": "git", "url": $url}' package.json > temp.json && mv temp.json package.json
              else
                jq -n --arg name "${repo_prefix}-${filename}-typescript-axios-http-library" --arg url "https://github.com/${{ github.repository_owner }}/${repo_prefix}-${filename}-typescript-axios-http-library.git" '{"name": $name, "version": "1.0.0", "description": "TypeScript Axios client generated from OpenAPI spec", "main": "index.js", "scripts": {"build": "tsc"}, "author": "", "license": "ISC", "dependencies": {"axios": "^0.21.1"}, "repository": {"type": "git", "url": $url}}' > package.json
              fi
              cd -
            fi
          done

      - name: Create and Push Repositories
        env:
          GH_PAT: ${{ secrets.GH_PAT }}
        run: |
          chmod +x scripts/manage-repo.sh
          spec_paths=$(find openapi -name "*.swagger.json")
          commit_message=$(git log -1 --pretty=%B)
          repo_prefix=${{ needs.setup-environment.outputs.repo_prefix }}
          for spec in $spec_paths; do
            filename=$(basename "${spec%.*}" | sed 's/\.swagger$//')
            for generator in go python dart-dio typescript-axios; do
              library_name="${repo_prefix}-${filename}-${generator}-http-library"
              output_dir="generated-clients/$library_name"
              scripts/manage-repo.sh "$library_name" "$output_dir" "$commit_message"
            done
          done

  generate-and-deploy-grpc-libs:
    needs: setup-environment
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@main
        with:
         submodules: "recursive"

      - name: "Check Targets"
        run: |
          if [ ! -d "proto" ]; then
            echo "proto dir is not exists, skipping job"
            exit 0
          fi
          
          proto_paths=$(find proto -name "*.proto")
          if [ -z "$proto_paths" ]; then 
            echo "Nothing to generate"
            exit 0
          fi


      - name: Set up Go
        uses: actions/setup-go@main
        with:
          go-version: '^1.16'

      - name: Set up Dart
        uses: dart-lang/setup-dart@main
        with:
          sdk: "stable"

      - name: Set up Python
        uses: actions/setup-python@main
        with:
          python-version: '3.x'

      - name: Setup Protobuf and Plugins
        run: |
          sudo apt-get update
          sudo apt-get install -y protobuf-compiler
          go install google.golang.org/protobuf/cmd/protoc-gen-go@latest
          go install google.golang.org/grpc/cmd/protoc-gen-go-grpc@latest
          go install github.com/grpc-ecosystem/grpc-gateway/v2/protoc-gen-grpc-gateway@latest
          pip install grpcio-tools grpcio
          dart pub global activate protoc_plugin
          echo "$HOME/.pub-cache/bin" >> $GITHUB_PATH

        

      - name: Generate gRPC Clients and Servers
        run: |
          mkdir -p generated-grpc-libs/{dart,go,python}
          proto_paths=$(find openapi -name "*.proto")
          proto_include="-I proto -I vendor/googleapis -I vendor/grpc-gateway"
          for proto in $proto_paths; do 
            protoc \
              $proto_include \
              --dart_out generated-grpc-libs/dart \
              --go_out generated-grpc-libs/go  \
              --go_opt paths=source_relative \
              --go-grpc_out generated-grpc-libs/go  \
              --go-grpc_opt paths=source_relative \
              --grpc-gateway_out generated-grpc-libs/go \
              --grpc-gateway_opt paths=source_relative \
              "$proto"
          done

      - name: Create and Push Repositories for gRPC
        env:
          GH_PAT: ${{ secrets.GH_PAT }}
        run: |
          chmod +x scripts/manage-repo.sh
          repo_prefix=${{ needs.setup-environment.outputs.repo_prefix }}
          commit_message=$(git log -1 --pretty=%B)
          proto_paths=$(find openapi -name "*.proto")
          for proto in $proto_paths; do
            filename=$(basename "${proto%.*}")
            for lang in dart go python; do
              library_name="${repo_prefix}-${filename}-${lang}-grpc-library"
              output_dir="generated-grpc-libs/$lang/$library_name"
              # This script should handle checking, updating, or creating repositories
              scripts/manage-repo.sh "$library_name" "$output_dir" "$commit_message"
            done
          done
          

  delete-repos-for-deleted-specs:
    needs: setup-environment
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Previous Commit for Comparison
        uses: actions/checkout@main
        with:
          fetch-depth: 0

      - name: Find Deleted Files
        id: find_deleted
        run: |
          git diff --name-status ${{ github.event.before }} ${{ github.sha }} | grep '^D' | cut -f2 > deleted_files.txt
          echo "deleted_files=$(cat deleted_files.txt)" >> $GITHUB_OUTPUT

      - name: Delete Repos for Deleted Specs
        env:
          GH_PAT: ${{ secrets.GH_PAT }}
        run: |
          chmod +x scripts/delete-repo.sh
          deleted_files=${{ steps.find_deleted.outputs.deleted_files }}
          repo_prefix=${{ needs.setup-environment.outputs.repo_prefix }}
          for file in $deleted_files; do
            if [[ "$file" =~ \.(swagger\.json)$ ]]; then
              filename=$(basename "${file%.*}")
              repo_name="${repo_prefix}-${filename}-http-library" # Adjust based on actual naming convention
              echo "Deleting repository for deleted spec: $repo_name"
              scripts/delete-repo.sh "$repo_name"
            fi
            if [[ "$file" =~ \.(proto)$ ]]; then
              filename=$(basename "${file%.*}")
              repo_name="${repo_prefix}-${filename}-grpc-library" # Adjust based on actual naming convention
              echo "Deleting repository for deleted spec: $repo_name"
              scripts/delete-repo.sh "$repo_name"
            fi
          done