name: Generate and Deploy Client Libraries

on:
  push:
    branches:
      - main

jobs:
  generate-and-deploy-http-libs:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v2

      - name: Install jq
        run: sudo apt-get install jq

      - name: Set up JDK 11
        uses: actions/setup-java@v2
        with:
          java-version: '11'
          distribution: 'adopt'

      - name: Find API Specifications
        id: find_specs
        run: |
          echo "::set-output name=spec_paths::$(find openapi -type f \( -iname "*.yaml" -o -iname "*.json" \) | xargs)"
        shell: bash

      - name: Generate Clients
        run: |
          mkdir -p generated-clients
          spec_paths=${{ steps.find_specs.outputs.spec_paths }}
          repo_prefix=$(echo "$GITHUB_REPOSITORY" | sed 's/.Docs\|.Documentation\|.Declaration//' | awk -F '/' '{print $2}')
          for spec in $spec_paths; do
            filename=$(basename "${spec%.*}")
            filename=${filename%.swagger}
            for generator in go python dart-dio typescript-axios; do
              library_name="${repo_prefix}-${filename}-${generator}-http-library"
              output_dir="generated-clients/$library_name"
              mkdir -p "$output_dir"
              echo "Generating $generator client for $spec"
              wget https://repo1.maven.org/maven2/org/openapitools/openapi-generator-cli/5.3.0/openapi-generator-cli-5.3.0.jar -O openapi-generator-cli.jar
              java -jar openapi-generator-cli.jar generate -i "$spec" -g "$generator" -o "$output_dir"
            done
          done
        shell: bash

      - name: Customize package.json for TypeScript Axios
        run: |
          spec_paths=${{ steps.find_specs.outputs.spec_paths }}
          repo_prefix=$(echo "$GITHUB_REPOSITORY" | sed 's/.Docs\|.Documentation\|.Declaration//' | awk -F '/' '{print $2}')
          for spec in $spec_paths; do
            filename=$(basename "${spec%.*}")
            filename=${filename%.swagger}
            ts_library_dir="generated-clients/${repo_prefix}-${filename}-typescript-axios-http-library"
            if [ -d "$ts_library_dir" ]; then
              cd "$ts_library_dir"
              if [ -f "package.json" ]; then
                jq --arg url "https://github.com/BobrePatre/${repo_prefix}-${filename}-typescript-axios-http-library.git" '.repository = {"type": "git", "url": $url}' package.json > temp.json && mv temp.json package.json
              else
                cat > package.json <<EOF
                {
                  "name": "${repo_prefix}-${filename}-typescript-axios-http-library",
                  "version": "1.0.0",
                  "description": "TypeScript Axios client generated from OpenAPI spec",
                  "main": "index.js",
                  "scripts": {
                    "build": "tsc"
                  },
                  "author": "",
                  "license": "ISC",
                  "dependencies": {
                    "axios": "^0.21.1"
                  },
                  "repository": {
                    "type": "git",
                    "url": "https://github.com/BobrePatre/${repo_prefix}-${filename}-typescript-axios-http-library.git"
                  }
                }
                EOF
              fi
              cd -
            fi
          done
        shell: bash

      - name: Create and Push Repositories
        env:
          GH_PAT: ${{ secrets.GH_PAT }}
        run: |
          spec_paths=${{ steps.find_specs.outputs.spec_paths }}
          commit_message=$(git log -1 --pretty=%B)
          repo_prefix=$(echo "$GITHUB_REPOSITORY" | sed 's/.Docs\|.Documentation\|.Declaration//' | awk -F '/' '{print $2}')
          for spec in $spec_paths; do
            filename=$(basename "${spec%.*}")
            filename=${filename%.swagger}
            for generator in go python dart-dio typescript-axios; do
              library_name="${repo_prefix}-${filename}-${generator}-http-library"
              output_dir="generated-clients/$library_name"
          
              echo "Checking if $library_name repository exists..."
              repo_full_name="BobrePatre/$library_name"
              if curl --silent --output /dev/null --head --fail "https://github.com/$repo_full_name"; then
                echo "Repository $repo_full_name already exists."
              else
                echo "Creating repository $repo_full_name..."
                curl -u "BobrePatre:$GH_PAT" https://api.github.com/user/repos -d "{\"name\":\"$library_name\"}"
              fi
          
              cd "$output_dir" || exit 1
              git init
              git config user.name "GitHub Actions"
              git config user.email "actions@github.com"

              if [ -z "$(git status --porcelain)" ]; then
                echo "No changes to commit for $repo_full_name."
              else
                git add .
                git commit -m "$commit_message"
                git branch -M main
                git remote add origin https://github.com/BobrePatre/$library_name.git
                git push -u origin main -f
              fi
              cd -
            done
          done
        shell: bash
